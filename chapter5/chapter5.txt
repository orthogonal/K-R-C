5.1:  Pointers and Addresses
----------------------------
A pointer is a group of cells that can hold an address.

& gives the address of an object:
	p = &c
sets pointer p to the address of c.
Now p "points to" c.
& does not apply to expressions, constants, or register variables.

* is the dereferencing operator.
When applied to a pointer, it accesses the object the pointer points to.
	y = *ip
Sets y equal to the object at the address held by the pointer ip.
	*ip = 2
Sets the object at the address of ip equal to 2.
Note that
	ip = 2
Is stupid, because your'e setting the pointer equal to 2.  So it will access whatever is in memory location 2, which you don't know anything about.

A pointer is declared with syntax:
	int *ip
This declares that ip is a pointer to an int - really it is saying that *ip (the object that ip points to) will be an int.

In a function declaration:
	double atof(char *)
Says that the argument of atof is a pointer to a char.
Every pointer points to a specific data type.

If ip points to x, then *ip can occur in any context where x could and will affect x.

* and & bind more tightly than arithmetic operators.
	++*ip
Increments the object that ip points to.
	(*ip)++
does as well.
	*ip++
points to the object after what ip currently points to.  This is because unary operators associate right to left, so ++ would come before *.

If p is a pointer, then
	r = p
copies the contents of p into r, so now r points to the same thing p pointed to.


5.2:  Pointers and Function Arguments
-------------------------------------
C passes arguments to function by value, which does not let you actually alter the variables.
If you pass pointers to the variables, then you can directly alter them from within the function.
	void swap(int *px, int *py)		to declare
	swap(&a, &b)					to call
	

5.3:  Pointers and Arrays
-------------------------
When you define an array of size n, you define a block of n consecutive objects.
Then array[i] is the i'th element of the array.  

A pointer p could be set
	p = &a[0]
It then points to the first element of a.  That is, it contains the address of a[0].
Any changes made to *p will change a[0].

If p points to an element of the array, then p + 1 is the next element and p - 1 is the previous element.
So *(p + 1) refers to a[1].
This is always true, regardless of the type or size of the variables in the array.

An object of type array is itself the address of element zero of the array.
So a and &a[0] are the same thing.
	p = &a[0]		p and a are referring to the same thing now.
	p[4]
You can do that.
a[i] is the same as *(a + i), because a + i is the address of the i'th element in a.
The main difference between an array and a pointer is that a pointer is a variable while an array name is not.
	p++ and p = a are legal.
	a++ and a = p are not legal.

When you pass an array name to a function, you're passing the location of the initial element.
That is, the array name parameter is a pointer.
As parameters in a function, char s[] and char *s are equivalent.
You can even pass part of an array to a function by passing a pointer to the beginning of the subarray.
	f(&a[2]) or f(a+2) will pass the pointer to the subarray starting at the third element of the original array.


5.4:  Address Arithmetic
------------------------
A pointer can be initialized just as any other variable, although the only meaningful values are zero or an expression with addresses.
	char *p = &a[0]
Zero is never a valid address for data.
NULL is often used in place of zero to indicate that it's a special value for a pointer.

If two pointers point to members of the same array, then relations like == or < work properly.

The address of the first element past the end of an array can be used in pointer arithmetic.

You can do arithmetic involving pointers.  For instance, p - q.

Valid pointer operations:
	-assignment of pointers of the same type
	-adding or subtracting a pointer and an integer
	-subtracting or comparing two pointers to members of the same array
	-assigning or comparing to zero
You may not add two pointers, multiply, divide, shift, mask, or add floats to them.
You can not assign a pointer of one type to a pointer of another type without a cast unless it's void *.

void *pt is a void pointer.  It is there so it can be cast later on for generics.  i.e.
	*(int*)pt
	

5.5:  Character Pointers and Functions
--------------------------------------
A string constant is an array of characters, terminated with the null character '\0'.
The length of storage is one more than the number of characters between the double quotes.

If you have a pointer p and set p = "string constant", then p becomes a pointer to the character array.

C does not provide any operators for processing an entire string of characters as a unit.

If you have
	char a[] = "test";
	char *p = "test";
a is an array that is just big enough to hold the five characters for that string constant.
It will always refer to the same storage space.
p is a pointer that points to the string constant.
You can not modify that string constant with p.  Try to do p[1] and you'll get "Bus error: 10" which usually means an invalid array index.
However, *p will be equal to 't'.
*p++ is the character that p pointed to before the increment.

*--p decrements p before fetching the character at the new location.

An array can be passed to a function expecting a character pointer and printf'd as %s.
*s++ increments the pointer, not the value at the location.  The ++ is done first.


5.6:  Pointer Arrays:  Pointers to Pointers
-------------------------------------------
Pointers can be stored in arrays just as other variables can.


5.7:  Multi-Dimensional Arrays
------------------------------
C provides rectangular multi-dimensional arrays.
You declare them like:
	char mda[2][4] = {
		{1, 2, 3, 4},
		{5, 6, 7, 8}
	}

A two-dimensional array is really a one-dimensional array, each of whose elements is an array.
Subscripts are written as
	mda[0][2]
To refer to 7 above.

If a two-dimensional array is to be passed to a function, the parameter declaration in the function must include the number of columns.
The number of rows is irrelevant, since what is passed is a pointer to an array of rows.
But we have to know that each row is going to be an array with n values.
So a declaration could be
	abc(int mda[2][4])
or
	abc(int mda[][4])
since the number of rows is irrelevant so we don't have to specify it.  It could also be
	abc(int (*mda)[4])
Specifying a pointer to an array of 4 integers.
Note that you need those parentheses.  *mda[4] is an array of four pointers, each of which points to an integer.

In general, only the first dimension of an array is free - all the others must be specified.


5.8:  Initialization of Pointer Arrays
--------------------------------------
For an array of character strings, you would declare with the following syntax:
	char *name[] = {"abc", "def", "ghi"}

The characters of each string are stored somewhere, and the pointer to them is stored in name[i].


5.9:  Pointers vs. Multi-dimensional Arrays
-------------------------------------------
The important advantage of a pointer array is that the rows of the array may be of different lengths.


5.10:  Command-line Arguments
-----------------------------
When main is called, it is called with two arguments.
	main(int argc, char *argv[])
argc is the number of command-line arguments the program was invoked with.
argv is a pointer to an array of character strings that contain the arguments.

argv[0] is always the name by which the program was invoked, so argc is at least 1.
Further arguments are separated by spaces.

A common convention for C programs on UNIX systems is that an argument that begins with a minus sign introduces an optional flag or parameter.
Optional arguments should be permitted in any order, and the rest of the program should be independent of the number that were present.
Furthermore, it is convenient for users if option arguments can be combined, i.e. find -nx pattern.

*argv is a string.
*argv[0] = (*argv)[0], the first character of that string.
*(argv + 1) is the next string argument.
((*argv) + 1) increments the pointer within the string.
argv is a pointer to a pointer within a string.  So initially it points to a pointer to the first character in the string.
When you increment argv, it jumps to the next pointer in the next string.
When you increment *argv, you increment the pointer within the string to go to the next character.
*argv is still a pointer though.  *argv[0] is the character at that index.  Since you increment *argv, [0] will be the character it points to, which may not be the first index in the string.


5.11:  Pointers to Functions
----------------------------
A function is not a variable, but it is possible to define pointers to functions.
For instance, you can declare a function with 
	int (*comp)(void *, void *)
as one of its arguments.  Then you call it with
	(*comp)(v[i], v[left])
And you pass it recursively just as 
	comp
	
Note that
	int *comp(void *, void *)
Is incorrect - it says that comp is a function returning a pointer to an int.

The important thing to note here is that void* is not called directly in the function that the function pointer is passed to.  It's there to be a blank argument that you can put anything into when you call the function defined at the function pointer.

The way you would use this would be to pass an actual function as the argument, with that function itself having two void * arguments.  You would have to do this by taking a real function and casting it in this way:
	(int (*)(void*, void*))(strcmp)
This says that strcmp will return an int and have two arguments that could be anything.  Then what is passed to the function is a pointer to strcmp.
You then are calling strcmp with whatever arguments you like when you use (*comp)(arg, arg).


5.12:  Complicated Declarations
-------------------------------
int *f() is a function that returns a pointer to an int.
int (*pf)() is a pointer to a function that returns an int.


